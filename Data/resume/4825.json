{"skills": ["hard working", "intellij idea", "speech recognition", "semaphore", "streaming", "user interface", "real time scheduling", "dom", "analysis", "mplab", "algorithm", "singleton", "virtualizations", "api based", "information exchange", "xml schema", "design pattern", "orcad", "synchronization", "mysql", "software design pattern", "unsupervised learning", "embedded linux", "regression", "c program", "openstack", "stack", "oop", "dimensionality reduction technique", "protocol", "resnet", "nonlinear state", "bayesian", "transfer learning", "encapsulation", "raspberry pi", "remote control", "implementation", "nonlinear control", "rfs", "freertos", "kvm", "operating system", "rest", "system design", "atmel", "maintenance", "unix", "multivariable control", "neural network", "kalman filter", "robot", "caffe", "c++", "simulink", "kafka", "mercurial", "python", "autocad", "spi", "particle filter", "tensorflow", "polymorphism", "memory management", "computer control", "android sdk", "scheduling", "emulator", "security", "operator overloading", "object recognition", "embedded software", "le", "regular expression", "netbeans", "ipc", "deep learning", "scripting", "gpus", "sql database", "ethernet", "database", "antivirus", "texas instrument", "rabbitmq", "control systems design", "spice", "object oriented", "docker", "cloud", "embedded device", "jetty", "futures", "udp", "convolutional neural network", "real time system", "linux operating system", "matlab", "management", "communication skill", "posix", "machine learning", "networking", "state transition", "java", "git", "supervised learning", "rtos", "tcp", "parsing", "keil", "maven", "internet", "hardware platform", "visualization", "desktop", "data augmentation", "network layer", "virtualization", "ecmascript", "robot system", "forex", "file system", "embedded software development", "sift", "firmware", "xslt", "data analytics", "xml file", "humanoid robot", "electronics engineering", "linux system", "activemq", "navigation", "cnn", "googlenet", "lstm", "micro controller", "spring boot", "math", "wifi", "xpath", "debugger", "software development", "android", "stmicroelectronics", "hypervisor", "hadoop", "dimensionality reduction", "data structure", "kera", "json", "clustering", "automation", "hdfs", "svn", "compiler", "automation test", "tomcat", "extended kalman filter", "structure", "xquery", "linux", "uart", "ftp", "nosql", "power management", "class", "adapting", "computer vision", "unit test", "sql", "linux kernel", "filesystem", "multi threading", "analytics", "pcb design", "client server", "union", "alexnet", "excel", "xml", "enterprise", "red hat", "reds", "jenkins", "i2c", "spring", "tabular data"], "fulltext": "CURRICULUM VITAE \nCONTACT INFORMATION \nTitle: \nMaster of Engineering \nCandidate information: \nFull name: Nguyen Trong Quang \nBirthday: 9th September 1988 \nGender: Male \nMarital status: Single \nAdditional information: \nBeing a great Master of Engineering in \u201cAutomatic Control and \nEmbedded Software\u201d field is not only a means of living, but also a deep \nindulgence and non-stop learning. With my qualifications, mature and \nprofessional outlook, I\u2019m very self-confident that my skills and hard-\nworking attitude will make a valuable contribution into profitability of \nthe company. Besides, I\u2019m always willing to encounter the challenging \nbecause I strongly believe: \u201cThere is nothing impossible for those who \nhave strong will\u201d \nContact information: \nAddress: 681/25A Au Co Street, Tan Thanh Ward, Tan Phu District, Ho \nChi Minh City, Vietnam \nCAREER OBJECTIVE \nThe desired location: Solution Architect / Technical Leader / Manager \nIndustries: Embedded Software / Firmware, Automotive, Robot \nJob status: Full time / Part time \nType of employment: Permanent \nCareer objective: \nBecoming a valued employee of a company and have a special career \nthat can be proud of \nDesired salary: \n2000 USD \nEDUCATION LEVEL \nSept 2011 - Nov 2014 \nHo Chi Minh City University of Technology - Vietnam \n- Faculty: Electrical - Electronics Engineering \n- Major: Automatic Control Engineering \n- Level: Master \n- Classification: Good (GPA: 7.20) \nSept 2006 - Apr 2011 \nHo Chi Minh City University of Technology - Vietnam \n- Faculty: Electrical - Electronics Engineering \n- Major: Power Engineering \n- Level: Engineer \n- Classification: Good (GPA: 7.08) \nWORKING EXPERIENCE  \nMar 2018 \u2013 Now \nSNAP Innovations - Vietnam \nFull time job: Technical Lead \nProject 1: Retail Trade \nAchievements: \n- Spring Boot (starting point for building all Spring-based applications) \n+ Build spring boot with maven and java \n+ Using spring initializr \n+ Build anything: REST API, WebSocket, web, streaming, \ntasks and more \n+ Rich support for SQL and NoSQL (accessing data \nwith MySQL, accessing data with JPA,...) \n+ Supports modern messaging middleware (Kafka, \nActiveMQ and RabbitMQ) \n+ Embedded runtime support (Tomcat, Jetty, and Undertow) \n+ Simplified security \n+ Works in the favorite IDE (Spring Tool Suite, IntelliJ \nIDEA, and NetBeans) \n+ Java programming \n- RapidJSON (a fast JSON parser/generator for C++ with both \nSAX/DOM style API) \n- A small, clean, linux-only thread-pool implementation using epoll with \nsupport for sockets, scheduled callbacks \n- QuickFIX (a free and open source implementation of the Financial \nInformation Exchange (FIX) protocol \n- Build trading systems, trading algorithms and related technologies for \nfinancial markets (Forex Exchange, Crypto Exchange) \nJan 2017 \u2013 Mar 2018 \nFPT Software Co., Ltd - Vietnam \nFull time job: Senior Software Developer \nProject 1: Automation Test Framework and Multimedia System Test \nProject 2: Vehicle Micro-controller - VuC \nProject 3: Industrial Inverter \nAchievements: \n- Fuego test system (jenkins, docker container, shell script, python\u2026) \n- Development environment of 2D/3D graphics systems (yocto/open-\nembedded, open-gles/egl, Qt5, wayland/weston, mesa-egl, alsa\u2026) \n- Audio/video automation test on linux (Renesas\u2019 boards) based \non fuego, ffmpeg, gstreamer, audacity\u2026 \n+ Audio/video stream, encode audio/video, decode \naudio/video, transcode audio/video, capture audio/video, \naudio/video driver\u2026 \n- Object recognition, image processing in OpenCV, algorithms to \ncompare images using OpenCV (sift/surf algorithm, histogram \nalgorithm\u2026) \n- C/C++, multi-threading programming, compiler, debugger (IDE: green \nhills, cubesuite+, CCStudio) on Windows based on Renesas, Texas \nInstrument micro-controller architecture (V850, RH850, AM335x...) \n- Writing batch scripts (.bat) \n- Automotive communication bus (CAN, LIN, Flexray, Ethernet, \nMOST\u2026), emulator and development tool (Vector CANoe, Vehicle Spy) \n- Integrating Matlab/Simulink/Stateflow models in CANoe's simulation \nenvironment (analysis, simulation, test, diagnostic), hardware-in-the-\nloop (HIL) simulation, .dll file for real-time interaction between CANoe \nand Matlab/Simulink/Stateflow \n- Real time operating system (OSEK/VDX, Microsar OS, TI-RTOS, \nFreeRTOS\u2026) \n+ Standard types of threads (interrupt service routine-ISR, \ntasks, idle) \n+ Schedulers (preemptive scheduler, time-slice scheduling...) \n+ Communication mechanism (semaphores, message \nqueues, queues...) \n+ Critical region mechanisms (mutexes, gates, locks...) \n+ Timing services (clocks, timers...) \n+ Power management (for low power devices, \npower management knows the state of the device) \n+ Memory management (variable-size heaps, fixed-size heaps...) \n+ Peripheral drivers (UART, SPI, I2C...) \n+ Protocol stacks (BLE, WiFi...) \n+ File system (FatFS...) \n+ Device management (exception handling, boot...) \nOct 2015 \u2013 Dec 2016 \nFPT Telecom JSC - Vietnam \nFull time job: Research and Development \u2013 R&D Engineer \nProject 1: Virtual Desktop Infrastructure - VDI \nProject 2: Mobifone-TV \nProject 3: Mini-PC \nAchievements: \n- Red hat enterprise virtualization, KVM hypervisor, SPICE (spice \nprotocol, spice client, spice server, spice guest), red hat openstack \nplatform \n- FFmpeg - a complete, cross-platform solution to record, convert \nand stream audio and video (video/audio codec, video/audio encoder, \nvideo/audio decoder, video/audio bitrate, resolution, profile\u2026) \n- RabbitMQ - a messaging broker, an intermediary for messaging. It gives \napplications a common platform to send and receive messages, and \nmessages a safe place to live until received. RabbitMQ supports several \nmessaging protocols, directly and through the use of plugins (AMQP, \nSTOMP, MQTT, HTTP) \n+ Producer \u2013 queue \u2013 consumer \n+ Distributing tasks among consumers in sequence \n+ Sending messages to many consumers at once \n+ Receiving messages selectively \n+ Receiving messages based on a pattern \n+ RPC (remote procedure call) implementation \n- Embedded linux kernel and driver \n+ Configuring, compiling and booting the kernel \n+ Linux kernel modules \n+ Developing linux device drivers \n+ Porting the linux kernel to a new hardware platform \n+ Linux kernel debugging \n- Android system \n+ Compiling and booting android \n+ Porting android to a new board \n+ Device development with android (developing and \ndebugging with ADB, android build system, building a library, \ndevelop a java native interface-JNI library, write an \napplication with the android SDK and its API) \n+ Qt for android, Qt Quick and QML for android, \njava programming \n- Building embedded linux systems with yocto/open-embedded (Board: \nraspberry pi, minnowboard max, dragonboard 410c, beaglebone black..) \n+ Creating layers, adding a new machine, writing and \nextending recipes \n+ Creating custom images, integrating the board in a board \nsupport package-BSP, application development with the poky \nSDK \n- MySQL database \n+ Build MySQL community server \n+ Build MySQL connector/C++ (X DevAPI, X DevAPI for \nC, legacy JDBC4-based API) \n- Machine learning with Matlab/Python (discover patterns and build \npredictive models with engineering, manufacturing, and financial data) \n+ Accessing and loading data, preprocessing data, \nderiving features, and training and refining models \n+ Supervised learning (classification and regression algorithms, \ntechniques \nfor \nmodel \nimprovement, \nincluding \nfeature \nselection, feature transformation, and hyperparameter tuning) \n+ Unsupervised \nlearning \n(hard \nand \nsoft \nclustering \nalgorithms, common dimensionality-reduction techniques \nfor improving model performance) \n- Big data with Matlab/Python \n+ Use matlab datastores to access data, datastores support a \nvariety of data types and storage systems (images, \nspreadsheets, tabular data files, custom files, databases-\nSQL/NoSQL, Hadoop/HDFS/Spark\u2026) \n+ Use matlab tall arrays and distributed arrays to explore, \nprocess, and analyze data. Tall arrays for statistics and \nmachine learning, visualization. Distributed arrays for math \nand matrix manipulation \n+ Use advanced mathematics and machine learning algorithms \nin matlab to develop predictive models with big data \n- Deep learning with Matlab/Python (training a network from scratch, \nusing transfer learning to train an existing network, adapting a \npretrained network for semantic segmentation) \n+ Access the latest pretrained models (GoogLeNet, VGG-16, VGG-\n19, AlexNet, ResNet-50, ResNet-101, and Inception-v3...) \n+ Create and configure network layers \n+ Adapt network architectures, including convolutional neural \nnetwork (CNN), directed acyclic graph (DAG), and long \nshort term memory (LSTM) \n+ Select the best training options and algorithms \n+ Use data augmentation and Bayesian optimization to \nimprove training accuracy \n+ Incorporate spectrograms for speech recognition \n+ Automate ground-truth labeling using apps \n+ Use NVIDIA GPUs for GPU programming: Accelerate \ntraining using multiple GPUs, the cloud, or clusters \n+ Use functions and tools to visualize intermediate results \nand debug deep learning models \n+ Work with models from other frameworks \n(Caffe, TensorFlow-Keras...) \n- Natural Language Processing-NLP with Matlab/Python (data \nanalytics with human language data) \n+ Automating the classification of reviews based on \nsentiment, whether positive or negative \n+ Counting the frequency of words or phrases in documents \nand performing topic modeling \n+ Developing predictive equipment maintenance schedules \nbased on sensor and text log data \n+ Automating labeling and tagging of speech recordings \nMar 2015 \u2013 Oct 2015 \nGlobal CyberSoft Vietnam JSC - Vietnam \nFull time job: Embedded Software Developer \nProject:  Directv \nAchievements: \n- Unix/Linux operating system \n+ Linux kernel architecture (hardware, kernel space, system \ncall, user space\u2026) \n+ Process and thread programming in linux, how process \nand thread communicate with each other, IPC-\ninterprocess communication (modes: pipe, fifo, message \nqueue, shared memory, socket...) \n+ Process scheduling in linux (scheduling classes such as \ncompletely fair scheduling class, real-time scheduling \nclass\u2026 Scheduling policies such as round robin-RR, first \ncome first served-FCFS, shortest job first-SJF, priority-PRI \nscheduling\u2026with preemptive/non-preemptive) \n+ Multi-threading programming and models of multi-threaded \napplications (boss/worker model, peer model, pipeline model, \nproducer-consumer model) \n+ Main issues with multi-threading applications (deadlock, \nrace condition) and synchronization mechanisms \n+ POSIX thread libraries \n+ Producer \u2013 consumer with pthreads (synchronization: \nqueue, state variable, busy waiting, semaphore, mutex, \ncondition variable ...) \n+ Dining philosophers with pthreads (solutions: asymmetric, \nwaiter\u2026without deadlocks and starvation) \n+ Network system (OSI, TCP/IP reference model), socket \nprogramming (client/server model, iterative server, concurrent \nserver, communicate locally or across a network, stream \nsockets, datagram sockets,\u2026) \n+ Writing shell scripts (.sh) \n+ Signals (signal handlers, system calls: alarm(), pause()\u2026) \n+ Memory mapped I/O (instead of using read/write system calls) \n- Design (using starUML software), design patterns (singleton, \nfactory, adapter...) \n- Data structure and algorithms \nSept 2012 \u2013 Mar 2015 \nMetran Vietnam Co., Ltd - Vietnam \nFull time job: Embedded Software Engineer \nProject 1: Continuous Positive Airway Pressure-CPAP Machine \nProject 2: Ventilator Machine \nSubject of thesis (master): Control of a self-balancing Robot on a ball \nAchievements: \n- Building embedded linux systems with buildroot (cross-compilation \ntoolchain, root filesystem generation, kernel image compilation and \nbootloader compilation) \n+ Internal toolchain, external toolchain \n+ Managing the linux kernel configuration \n+ Integrating new packages in buildroot \n+ Root filesystem customization \n- Object oriented programming (OOP) in C++ \n(abstraction, encapsulation, inheritance, polymorphism) \n+ Class and object, constructor and destructor, copy constructor, \nfriend function, inline function, this pointer, static member\u2026 \n+ Base class, derived class, virtual function, pure \nvirtual function, virtual destructor\u2026 \n+ Function overloading, operator overloading, overloadable/non-\noverloadable operator, constructor overloading\u2026 \n+ Array, string, pointer, reference and dynamic \nmemory allocation, exception handling, template\u2026 \n+ STL- standard template library (vector, list, map, multimap...) \n+ How to write makefile effectively (compiler, object file, \nlinker, static lib, shared lib,...) \n+ Debug logging (glog) and unit tests (googletest, cppunit,...), \ngdb to debug the C/C++ program \n- C/C++, multi-threading programming, compiler, debugger (IDE: Qt \ncreator, eclipse) on linux (Board: friendlyARM, AT91SAM9x5, \ni.MX6, STM32F4...) \n- Building Qt for embedded linux (Qt libraries and Qt creator), Qt \nfor non-graphical applications \n+ QtCore-event loop with an original signal/slot mechanism, \ndata structures, threads, regular expressions \n+ QtNetwork-networking (TCP, UDP clients and servers \nmade easy, HTTP, FTP support) \n+ QtXml-SAX/DOM parsing of XML files \n+ QtXmlPatterns-XPath, XQuery, XSLT and XML \nschema support \n+ QtGui-GUI widgets \n+ QtMultimedia-low-level multimedia functionality \n+ QtScript-ECMAScript-based scripting engine \n+ QtSQL-query various databases \n+ QtOpenGL, QtOpenVG, QtSvg... \n- Qt Quick-QML programming for graphical user interface-\nGUI applications \n+ QML object attributes \n+ Integrating QML and C++ (exposing attributes of C++ \nclasses to QML, embedding C++ objects into QML with \ncontext properties, interacting with QML objects from C++...) \n+ Model/view programming, using C++ models with Qt \nQuick views \n+ Qt Quick - states, transitions and animations \n- Real-time for linux (RTAI, RT-PREEMPT, xenomai) \n- Inertial measurement unit \u2013 IMU (gyroscope, accelerometer, \nmagnetometer sensor), GPS/INS and kalman filter \n- System modeling and identification (constructing mathematical \nmodels or create linear and nonlinear dynamic system models from \nmeasured input-output data) \n- Control algorithm design and simulation using matlab/simulink/stateflow, \ngenerating and integrating C/C++ code from matlab/simulink/stateflow for \ndeployment on an embedded device (PID, intelligent control, nonlinear \ncontrol, adaptive control, optimal control, multivariable control, fuzzy \nlogic, neural network, genetic algorithm...) \n- Optimal state estimation using kalman filter (optimally estimate \nthe internal states of a system in the presence of uncertain and \nindirect measurements) \n+ Guidance, navigation and control applications (combining \nGPS and IMU measurements to synthesize position and velocity \nsignals) \n+ Computer vision (object tracking to predict an object\u2019s \nfuture location) \n+ Together with LQR algorithm for LQG control \n+ Nonlinear state estimators (extended kalman filters, \nunscented kalman filters, and particle filters) \n- Software management and source code control (svn, mercurial, git) \n- Software development life cycle (V-Model) \nSept 2011 - July 2012 \n3T Robotics Group - Vietnam \nFull time job: Electrical - Electronics Engineer \nProject: Humanoid Robot \nAchievements: \n- C/C++ programming for Microchip PIC, STMicroelectronics ARM \nmicro-controller \n+ Data type, array, string, pointer, memory storage \nclass, function call, dynamic memory allocation\u2026 \n+ Data type: struct, union, enum, bit field\u2026 \n+ Input/output and standard C library\u2026 \n+ Void pointer, function pointer and state machine\u2026 \n- Analyze a hardware schematic, PCB. \n- Microchip PIC, STMicroelectronics ARM micro-controller \ndevelopment tools, compiler, debugger (IDE: MPLAB, MDK-ARM) and \narchitecture \n- Peripheral communication programming (GPIO, I2C, SPI, UART, \nADC, DAC, DMA, WDG, TIM, PWM, EXTI, USB Interface...) \nSept 2010 - Feb 2011 \nHo Chi Minh City University of Technology - Vietnam \nSubject of thesis (engineer): Design of a remote control device for the \nrolling door using the AT89C51 micro-controller \nAchievements: \n- C and assembly programming for Atmel 8051 micro-controller \n- Radio frequency (RF) remote control system \n- Atmel 8051 micro-controller development tools, compiler, \ndebugger (IDE: Keil C51) and architecture \nFeb 2010 - July 2010 \nHo Chi Minh City University of Technology - Vietnam \nProject: Using DSP TMS320LF2407A micro-controller to control of \nthree-phase asynchronous motors by space vector modulation \nAchievements: \n- C/C++ programming for Texas Instrument DSP micro-controller \n- Layout a printed circuit board (PCB), design and simulate an electronic \ncircuit using proteus, orCAD software \n- Computer - based measurement and control system \n- Texas Instrument DSP micro-controller development tools, compiler, \ndebugger (IDE: CCStudio) and architecture \nSept 2009 - Feb 2010 \nHo Chi Minh City University of Technology - Vietnam \nProject: Power supply design \nAchievements: \n- The use of technical drawing design software (autoCAD) \n- Knowledge of power supply design: calculations of power \ndistribution, electrical safety, selection of electrical equipment... \nSKILLS \nProfessional knowledge - Good \n- Micro-controllers and embedded systems (DSP, ARM, PIC, 8051...) \n- Unix/Linux/Android operating systems \n- Real time operating system \n- Advanced programming (C/C++, java, python, matlab,...) \n- Predictive analytics, machine learning, deep learning \n- Natural language processing \n- Model based design (Matlab/simulink/stateflow) \n- System modeling and identification \n- Control system design and simulation \n- Optimal state estimation (Kalman filter) \n- Digital system design \n- Electronics engineering \n- Dynamic control of dynamic system \n- Robot dynamics and control \n- Computer vision \n- Robotics \n- Intelligent control systems \n- SCADA: design and analysis \n- PLC \n- Soft computing (fuzzy system, neural network, genetic algorithm) \n- Nonlinear control \n- Adaptive and robust control \n- Optimal control theory \n- Multivariable control \nIndependent studying and researching skills - Good \n- Collected information from many sources: library, research books \nand internet to enrich my knowledge \n- Well reading comprehension of english documents \nEnglish \u2013 Good \n- Good in listening, speaking, reading and writing skills \nCommunication and presentation skills - Good \n- Acquired experience about effective presentation methods \n- Realized the importance of communication skills \n- Took the course of communication and presentation skills \nTeam work, leading skills - Good \n- Participated the green summer volunteer campaign as a team leader \n- Worked as a member of youth union related to organizing social \nactivities \nComputer - Good \n- Good at windows, word, excel, power point and technical software... \n- Had knowledge of mail, internet and antivirus... \nINTERESTS \n- Listening to music, playing football, learning foreign languages, \nsurfing the internet, swimming and meeting new people \nREFERENCES \nLe Tuan Nha \nMaster - HCMC University of Technology \nPhone: 0979590884 \nEmail: tuannha_1987@yahoo.com \nRelationship: friend ", "educations": [{"id": 5107, "gpa": "7.08", "major": "K\u1ef9 thu\u1eadt \u0111i\u1ec7n", "school": "Ho Chi Minh City University of Technology", "diploma": "Bachelors", "end_time": "2011-04-01T00:00:00Z", "conf_score": 0.8936280632648882, "start_time": "2006-09-01T00:00:00Z", "picklist_major": "Technical", "major_categories": "K\u1ef9 thu\u1eadt", "major_categories_detail": "K\u1ef9 thu\u1eadt \u0111i\u1ec7n, \u0111i\u1ec7n t\u1eed v\u00e0 vi\u1ec5n th\u00f4ng"}, {"id": 5106, "gpa": "7.2", "major": "K\u1ef9 thu\u1eadt \u0111i\u1ec1u khi\u1ec3n v\u00e0 t\u1ef1 \u0111\u1ed9ng h\u00f3a", "school": "Ho Chi Minh City University of Technology -", "diploma": "Masters", "end_time": "2014-11-01T00:00:00Z", "conf_score": 0.9025074663677668, "start_time": "2011-09-01T00:00:00Z", "picklist_major": "Technical", "major_categories": "K\u1ef9 thu\u1eadt", "major_categories_detail": "K\u1ef9 thu\u1eadt \u0111i\u1ec7n, \u0111i\u1ec7n t\u1eed v\u00e0 vi\u1ec5n th\u00f4ng"}], "experiences": [{"id": 17088, "detail": "Project 1: Retail Trade Achievements: - Spring Boot (starting point for building all Spring-based applications)\n+ Build spring boot with maven and java\n+ Using spring initializr\n+ Build anything: REST API, WebSocket, web, streaming, tasks and more\n+ Rich support for SQL and NoSQL (accessing data with MySQL, accessing data with JPA,...) + Supports modern messaging middleware (Kafka, ActiveMQ and RabbitMQ) + Embedded runtime support (Tomcat, Jetty, and Undertow) + Simplified security\n+ Works in the favorite IDE (Spring Tool Suite, IntelliJ IDEA, and NetBeans) + Java programming\n- RapidJSON (a fast JSON parser/generator for C++ with both\nSAX/DOM style API) - A small, clean, linux-only thread-pool implementation using epoll with support for sockets, scheduled callbacks\n- QuickFIX (a free and open source implementation of the Financial Information Exchange (FIX) protocol\n- Build trading systems, trading algorithms and related technologies for financial markets (Forex Exchange, Crypto Exchange)", "company": "SNAP Innovations", "end_time": "2023-04-13T00:00:00Z", "industry": "Other", "position": "Technical Lead", "conf_score": 0.9065816170526036, "start_time": "2018-03-01T00:00:00Z"}, {"id": 17089, "detail": "Project 1: Automation Test Framework and Multimedia System Test Project 2: Vehicle Micro-controller - VuC Project 3: Industrial Inverter Achievements: - Fuego test system (jenkins, docker container, shell script, python...)\n- Development environment of 2D/3D graphics systems (yocto/open- embedded, open-gles/egl, Qt5, wayland/weston, mesa-egl, alsa...)\n- Audio/video automation test on linux (Renesas\u2019 boards) based on fuego, ffmpeg, gstreamer, audacity...\n+ Audio/video stream, encode audio/video, decode audio/video, transcode audio/video, capture audio/video, audio/video driver...\n- Object recognition, image processing in OpenCV, algorithms to compare images using OpenCV (sift/surf algorithm, histogram algorithm...)\n- C/C++, multi-threading programming, compiler, debugger (IDE: green hills, cubesuite+, CCStudio) on Windows based on Renesas, Texas Instrument micro-controller architecture (V850, RH850, AM335x...) - Writing batch scripts (.bat)\n- Automotive communication bus (CAN, LIN, Flexray, Ethernet, MOST...), emulator and development tool (Vector CANoe, Vehicle Spy) - Integrating Matlab/Simulink/Stateflow models in CANoe's simulation environment (analysis, simulation, test, diagnostic), hardware-in-the- loop (HIL) simulation, .dll file for real-time interaction between CANoe and Matlab/Simulink/Stateflow - Real time operating system (OSEK/VDX, Microsar OS, TI-RTOS, FreeRTOS...) + Standard types of threads (interrupt service routine-ISR, tasks, idle)\n+ Schedulers (preemptive scheduler, time-slice scheduling...)\n+ Communication mechanism (semaphores, message queues, queues...)\n+ Critical region mechanisms (mutexes, gates, locks...)\n+ Timing services (clocks, timers...)\n+ Power management (for low power devices, power management knows the state of the device)\n+ Memory management (variable-size heaps, fixed-size heaps...)\n+ Peripheral drivers (UART, SPI, I2C...) + Protocol stacks (BLE, WiFi...) + File system (FatFS...) + Device management (exception handling, boot...)", "company": "FPT Software Co., Ltd", "end_time": "2018-03-31T00:00:00Z", "industry": "High Technology", "position": "Senior Software Developer", "conf_score": 0.9065816170526036, "start_time": "2017-01-01T00:00:00Z"}, {"id": 17090, "detail": "Project 1: Virtual Desktop Infrastructure - VDI Project 2: Mobifone-TV Project 3: Mini-PC Achievements: - Red hat enterprise virtualization, KVM hypervisor, SPICE (spice protocol, spice client, spice server, spice guest), red hat openstack platform\n- FFmpeg - a complete, cross-platform solution to record, convert and stream audio and video (video/audio codec, video/audio encoder, video/audio decoder, video/audio bitrate, resolution, profile...)\n- RabbitMQ - a messaging broker, an intermediary for messaging. It gives applications a common platform to send and receive messages, and messages a safe place to live until received. RabbitMQ supports several messaging protocols, directly and through the use of plugins (AMQP, STOMP, MQTT, HTTP) + Producer - queue - consumer\n+ Distributing tasks among consumers in sequence\n+ Sending messages to many consumers at once\n+ Receiving messages selectively\n+ Receiving messages based on a pattern\n+ RPC (remote procedure call) implementation\n- Embedded linux kernel and driver\n+ Configuring, compiling and booting the kernel\n+ Linux kernel modules\n+ Developing linux device drivers\n+ Porting the linux kernel to a new hardware platform\n+ Linux kernel debugging\n- Android system\n+ Compiling and booting android\n+ Porting android to a new board\n+ Device development with android (developing and debugging with ADB, android build system, building a library, develop a java native interface-JNI library, write an application with the android SDK and its API) + Qt for android, Qt Quick and QML for android, java programming\n- Building embedded linux systems with yocto/open-embedded (Board: raspberry pi, minnowboard max, dragonboard 410c, beaglebone black..)\n+ Creating layers, adding a new machine, writing and extending recipes\n+ Creating custom images, integrating the board in a board support package-BSP, application development with the poky\nSDK - MySQL database\n+ Build MySQL community server\n+ Build MySQL connector/C++ (X DevAPI, X DevAPI for\nC, legacy JDBC4-based API) - Machine learning with Matlab/Python (discover patterns and build predictive models with engineering, manufacturing, and financial data)\n+ Accessing and loading data, preprocessing data, deriving features, and training and refining models\n+ Supervised learning (classification and regression algorithms, techniques for model improvement, including feature selection, feature transformation, and hyperparameter tuning)\n+ Unsupervised learning (hard and soft clustering algorithms, common dimensionality-reduction techniques for improving model performance)\n- Big data with Matlab/Python + Use matlab datastores to access data, datastores support a variety of data types and storage systems (images, spreadsheets, tabular data files, custom files, databases-\nSQL/NoSQL, Hadoop/HDFS/Spark...) + Use matlab tall arrays and distributed arrays to explore, process, and analyze data. Tall arrays for statistics and machine learning, visualization. Distributed arrays for math and matrix manipulation\n+ Use advanced mathematics and machine learning algorithms in matlab to develop predictive models with big data\n- Deep learning with Matlab/Python (training a network from scratch, using transfer learning to train an existing network, adapting a pretrained network for semantic segmentation)\n+ Access the latest pretrained models (GoogLeNet, VGG-16, VGG- 19, AlexNet, ResNet-50, ResNet-101, and Inception-v3...) + Create and configure network layers\n+ Adapt network architectures, including convolutional neural network (CNN), directed acyclic graph (DAG), and long short term memory (LSTM) + Select the best training options and algorithms\n+ Use data augmentation and Bayesian optimization to improve training accuracy\n+ Incorporate spectrograms for speech recognition\n+ Automate ground-truth labeling using apps\n+ Use NVIDIA GPUs for GPU programming: Accelerate training using multiple GPUs, the cloud, or clusters\n+ Use functions and tools to visualize intermediate results and debug deep learning models\n+ Work with models from other frameworks\n(Caffe, TensorFlow-Keras...) - Natural Language Processing-NLP with Matlab/Python (data analytics with human language data)\n+ Automating the classification of reviews based on sentiment, whether positive or negative\n+ Counting the frequency of words or phrases in documents and performing topic modeling\n+ Developing predictive equipment maintenance schedules based on sensor and text log data\n+ Automating labeling and tagging of speech recordings", "company": "FPT Telecom JSC", "end_time": "2016-12-31T00:00:00Z", "industry": "High Technology", "position": "Research and Development - R&D Engineer", "conf_score": 0.9284931738970706, "start_time": "2015-10-01T00:00:00Z"}, {"id": 17091, "detail": "Project: Directv Achievements: - Unix/Linux operating system\n+ Linux kernel architecture (hardware, kernel space, system call, user space...)\n+ Process and thread programming in linux, how process and thread communicate with each other, IPC- interprocess communication (modes: pipe, fifo, message queue, shared memory, socket...)\n+ Process scheduling in linux (scheduling classes such as completely fair scheduling class, real-time scheduling class... Scheduling policies such as round robin-RR, first come first served-FCFS, shortest job first-SJF, priority-PRI scheduling...with preemptive/non-preemptive)\n+ Multi-threading programming and models of multi-threaded applications (boss/worker model, peer model, pipeline model, producer-consumer model)\n+ Main issues with multi-threading applications (deadlock, race condition) and synchronization mechanisms\n+ POSIX thread libraries\n+ Producer - consumer with pthreads (synchronization: queue, state variable, busy waiting, semaphore, mutex, condition variable ...) + Dining philosophers with pthreads (solutions: asymmetric, waiter...without deadlocks and starvation)\n+ Network system (OSI, TCP/IP reference model), socket programming (client/server model, iterative server, concurrent server, communicate locally or across a network, stream sockets, datagram sockets,...)\n+ Writing shell scripts (.sh)\n+ Signals (signal handlers, system calls: alarm(), pause()...)\n+ Memory mapped I/O (instead of using read/write system calls)\n- Design (using starUML software), design patterns (singleton, factory, adapter...)\n- Data structure and algorithms", "company": "Global CyberSoft Vietnam JSC", "end_time": "2015-10-31T00:00:00Z", "industry": "High Technology", "position": "Embedded Software Developer", "conf_score": 0.9065816170526036, "start_time": "2015-03-01T00:00:00Z"}, {"id": 17092, "detail": "Project 1: Continuous Positive Airway Pressure-CPAP Machine Project 2: Ventilator Machine Subject of thesis (master): Control of a self-balancing Robot on a ball\nAchievements: - Building embedded linux systems with buildroot (cross-compilation toolchain, root filesystem generation, kernel image compilation and bootloader compilation)\n+ Internal toolchain, external toolchain\n+ Managing the linux kernel configuration\n+ Integrating new packages in buildroot\n+ Root filesystem customization\n- Object oriented programming (OOP) in C++ (abstraction, encapsulation, inheritance, polymorphism)\n+ Class and object, constructor and destructor, copy constructor, friend function, inline function, this pointer, static member...\n+ Base class, derived class, virtual function, pure virtual function, virtual destructor...\n+ Function overloading, operator overloading, overloadable/non- overloadable operator, constructor overloading...\n+ Array, string, pointer, reference and dynamic memory allocation, exception handling, template...\n+ STL- standard template library (vector, list, map, multimap...)\n+ How to write makefile effectively (compiler, object file, linker, static lib, shared lib,...)\n+ Debug logging (glog) and unit tests (googletest, cppunit,...), gdb to debug the C/C++ program\n- C/C++, multi-threading programming, compiler, debugger (IDE: Qt creator, eclipse) on linux (Board: friendlyARM, AT91SAM9x5, i.MX6, STM32F4...) - Building Qt for embedded linux (Qt libraries and Qt creator), Qt for non-graphical applications\n+ QtCore-event loop with an original signal/slot mechanism, data structures, threads, regular expressions\n+ QtNetwork-networking (TCP, UDP clients and servers made easy, HTTP, FTP support)\n+ QtXml-SAX/DOM parsing of XML files\n+ QtXmlPatterns-XPath, XQuery, XSLT and XML schema support\n+ QtGui-GUI widgets\n+ QtMultimedia-low-level multimedia functionality\n+ QtScript-ECMAScript-based scripting engine\n+ QtSQL-query various databases\n+ QtOpenGL, QtOpenVG, QtSvg... - Qt Quick-QML programming for graphical user interface-\nGUI applications\n+ QML object attributes\n+ Integrating QML and C++ (exposing attributes of C++ classes to QML, embedding C++ objects into QML with context properties, interacting with QML objects from C++...) + Model/view programming, using C++ models with Qt Quick views\n+ Qt Quick - states, transitions and animations\n- Real-time for linux (RTAI, RT-PREEMPT, xenomai)\n- Inertial measurement unit - IMU (gyroscope, accelerometer, magnetometer sensor), GPS/INS and kalman filter\n- System modeling and identification (constructing mathematical models or create linear and nonlinear dynamic system models from measured input-output data)\n- Control algorithm design and simulation using matlab/simulink/stateflow, generating and integrating C/C++ code from matlab/simulink/stateflow for deployment on an embedded device (PID, intelligent control, nonlinear control, adaptive control, optimal control, multivariable control, fuzzy logic, neural network, genetic algorithm...)\n- Optimal state estimation using kalman filter (optimally estimate the internal states of a system in the presence of uncertain and indirect measurements)\n+ Guidance, navigation and control applications (combining\nGPS and IMU measurements to synthesize position and velocity signals)\n+ Computer vision (object tracking to predict an object\u2019s future location)\n+ Together with LQR algorithm for LQG control\n+ Nonlinear state estimators (extended kalman filters, unscented kalman filters, and particle filters)\n- Software management and source code control (svn, mercurial, git)\n- Software development life cycle (V-Model)", "company": "Metran Vietnam Co., Ltd", "end_time": "2015-03-31T00:00:00Z", "industry": "Other", "position": "Embedded Software Engineer", "conf_score": 0.9065816170526036, "start_time": "2012-09-01T00:00:00Z"}, {"id": 17093, "detail": "Project: Humanoid Robot Achievements: - C/C++ programming for Microchip PIC, STMicroelectronics ARM micro-controller\n+ Data type, array, string, pointer, memory storage class, function call, dynamic memory allocation...\n+ Data type: struct, union, enum, bit field...\n+ Input/output and standard C library...\n+ Void pointer, function pointer and state machine...\n- Analyze a hardware schematic, PCB. - Microchip PIC, STMicroelectronics ARM micro-controller development tools, compiler, debugger (IDE: MPLAB, MDK-ARM) and architecture\n- Peripheral communication programming (GPIO, I2C, SPI, UART, ADC, DAC, DMA, WDG, TIM, PWM, EXTI, USB Interface...)", "company": "3T Robotics Group", "end_time": "2012-07-31T00:00:00Z", "industry": "Other", "position": "Electrical - Electronics Engineer", "conf_score": 0.9065816170526036, "start_time": "2011-09-01T00:00:00Z"}], "address": "681/25a Au Co Street, Tan Thanh Ward, Tan Phu District, Ho Chi Minh City, Vietnam"}